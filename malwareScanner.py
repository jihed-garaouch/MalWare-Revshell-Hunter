import hashlib 
import os
import sys
import requests
import zipfile
import shutil
import yara
extracted_file =None
_yara_file= "yara_rules.yar"
def scanFile(filePath):
   sha256_hash = hashlib.sha256()
   try: 
        with open(filePath,"rb") as file:
            while True:
                block=file.read(4096)
                if not block:
                    break
                sha256_hash.update(block)
        return sha256_hash.hexdigest()
   except FileNotFoundError:
        return None
def hashExistsInDb(check_hash):
    n = 0
    with open(extracted_file,'r') as database:
        for line in database:
            n =n + 1
            if len(line.strip()) != 0:
                if not line.startswith('#'):
                    if str(check_hash) in str(line):
                        return True
    return False
def checkHashes(file_hashes):
    malwares={}
    for filename,check_hash in file_hashes.items():
        test=hashExistsInDb(check_hash)
        if test==True:
            malwares[filename]=check_hash
    return malwares
            
def scanDirectory(directory_path):
    # List comprehension to get full paths of files
    files = [os.path.join(directory_path, f) for f in os.listdir(directory_path) if os.path.isfile(os.path.join(directory_path, f))]
    return files

def downloadHashesDatabase(url, extract_to='.'):
    global extracted_file
    file_name = url.split('/')[-1]
    zip_path = os.path.join(extract_to, file_name)

    # Request the zip file from the URL
    response = requests.get(url, stream=True)
    if response.status_code == 200:
        with open(zip_path, 'wb') as file:
            shutil.copyfileobj(response.raw, file)
        print(f"Downloaded {file_name}")
        with zipfile.ZipFile(zip_path, 'r') as zip_ref:
            member = zip_ref.infolist()[0]  
            target_path = os.path.join(extract_to, member.filename)
            if os.path.isfile(target_path) or os.path.islink(target_path):
                os.remove(target_path)
            zip_ref.extract(member, extract_to)
            extracted_file = member.filename  
            print(f"Extracted {member.filename} to {extract_to}")
        os.remove(zip_path)
    else:
        print(f"Failed to download file from {url}. Status code: {response.status_code}")
        extracted_file_name = None  
def scan_with_yara(rules, file_path):
    
    matches = rules.match(file_path)
    return matches

def print_banner():
    banner = '''
    ###########################################################
    #                                                         #
    #   bargeEllile0XDA Malware/Revshell Hunter               #
    #                                                         #
    ###########################################################
    '''
    print(banner)
    
def main():
    global _yara_file
    global extracted_file
    print_banner()
    if len(sys.argv) != 2:
        print("Usage: python malwarescanner.py <path_to_directory>")
        return
    directory = sys.argv[1]
    if not os.path.isdir(directory):
        print(f"The provided path {directory} is not a directory.")
        return
    url = 'https://bazaar.abuse.ch/export/txt/sha256/full'
    downloadHashesDatabase(url)    
    files = scanDirectory(directory)
    extracted_file_path = os.path.join(directory, extracted_file) if extracted_file else None
    yara_file_path = os.path.join(directory, _yara_file)

    if extracted_file_path in files: 
        files.remove(extracted_file_path) 
    if yara_file_path in files: 
        files.remove(yara_file_path)
    file_hashes={} 
    rules = yara.compile(_yara_file)
    yara_res={}
    for file in files:
        file_hash = scanFile(file)
        if file_hash:
            file_hashes[file] = file_hash
        yara_matches = scan_with_yara(rules, file)
        if yara_matches:
            yara_res[file] = yara_matches
    malwares=checkHashes(file_hashes)
    print(f"We found these malwares: {malwares}")
    print(f"We found these revshells: {yara_res}")

if __name__ == "__main__":
 
    main()
